#!/usr/bin/python

x = 3              # a whole number                   
f = 3.1415926      # a floating point number              
name = "Python"    # a string

# print(x)
# print(f)
# print(name)

# combination = name + " " + name
# print(combination)

# sum = f + f
# print(sum)

# NAMING 
# A variable name must begin with a letter (upper or lower case) or an underscore. Variables cannot start with a number and are case sensitive.

# If you create two variables x and X, they are different variables.

# CAMEL CASING
daysInYear = 365
daysInMonth = 30
numberFiles = 5

# IDENTIFIERS
# Any name that is used to define a class, function, variable module, or object is an identifier.

# LITERALS
# In Python, there are the string literals, byte literals, integer literals, floating point literals, and imaginary literals.

# OPERATORS
# In Python, you can implement operations using corresponding tokens. For instance, the operator “add” uses the token “+”. Other operators include subtract (-), multiply (*), remainder (%), and (&), or (\), and many others.


# Basic data types in Python: Numbers, Strings, Booleans, Sequences, Dictionaries
myint = 5
myfloat = 13.2
mystr = 'This is a string'
mybool = True
mylist = [0, 1, "two", 3.2, False]
mytuple = (0, 1, 2)
mydict = {"one" : 1, "two" : 2} 

# print(myint)
# print(myfloat)
# print(mystr)
# print(mybool) 
# print(mylist)
# print(mytuple)
# print(mydict)

# re-declaring a variable works
# myint = "abc"
# print(myint)

# # to access a member of a sequence type, use []
# print(mylist[2])
# print(mytuple[1])

# # use slices to get parts of a sequence
# print(mylist[1:5])

# # use step values (how many items to skip over)
# print(mylist[1:5:2]) #start, end, stepover

# # you can use slices to reverse a sequence
# print(mylist[::-1])

# dictionaries are accessed via keys
# print(mydict["one"])

# ERROR: variables of different types cannot be combined
# print("string type" + str(123))

# Global vs. local variables in functions
def someFunction():
    global mystr # variable exists in global space n declared already
    mystr = "def"
    print(mystr)

someFunction() # function gets its own local copy of 'mystr'
print(mystr) # prints 'def' AND the original "This is a string"

# tell the function there is a global variable to affect the orginally saved variable
del mystr #delete variable
print(mystr)


# PEMDAS OF PYTHON
'( )'
# Items within parentheses are evaluated first.	
# In 2 * (x + 1), the x + 1 is evaluated first, with the result then multiplied by 2.

'unary -'
# - used for negation (unary minus) is next.	
#In 2 * -x, the -x is computed first, with the result then multiplied by 2.

'* / %'	
# Next to be evaluated are *, /, and %, having equal precedence.	
# (% is discussed elsewhere.)

'+ -'	
# Finally come + and - with equal precedence.	
# In y = 3 + 2 * x, the 2 * x is evaluated first, with the result then added to 3, because * has higher precedence than +. 
# Spacing doesn't matter: y = 3+2 * x would still evaluate 2 * x first.

'left-to-right'	
# If more than one operator of equal precedence could be evaluated, evaluation occurs left to right.	
# In y = x * 2 / 3, the x * 2 is first evaluated, with the result then divided by 3.

# COMPOUND OPERATORS
age = age + 1
or
age += 1

'-=', '*=', '/=', '%=' 

# Division: Integer rounding

20 / 10 is 2.0
50 / 50 is 1.0
5 / 10 is 0.5

20 // 10 is 2.
50 // 50 is 1.
5 // 10 is 0. (5/10 is 0 and the remainder 5 is thrown away).
5.0 // 2 is 2.0

''' 
For division, the second operand of / or // must never be 0, 
because division by 0 is mathematically undefined.
'''

# Modulo (%)
''' 
The basic arithmetic operators include not just +, -, *, /, but also %. 
The modulo operator (%) evaluates the remainder of the division of two integer operands. 
Ex: 23 % 10 is 3.
'''
# examples:
24 % 10 is 4. ('Reason:' 24 / 10 is 2 with remainder 4.)
50 % 50 is 0. ('Reason:' 50 / 50 is 1  with remainder 0)
1 % 2 is 1. ('Reason:' 1 / 2 is 0  with remainder 1)

# GETTING DIGITS
'''
Given a number, % and / can be used to get each digit. For a 3-digit number user_val like 927:
'''
ones_digit     = user_val % 10    # Ex: 927 % 10 is 7. 
tmp_val        = user_val // 10

tens_digit     = tmp_val % 10     # Ex: tmp_val = 927 // 10 is 92. Then 92 % 10 is 2.
tmp_val        = tmp_val // 10

hundreds_digit = tmp_val % 10     # Ex: tmp_val = 92 // 10 = 9. Then 9 % 10 is 9.

# GET PREFIX
'''
Given a 10-digit phone number stored as an integer, % and // can be used to get any part, such as the prefix. 
For phone_num = 9365551212 (whose prefix is 555):
'''
tmp_val = phone_num // 10000  # '// 10000' removes rightmost 4 digits , so '9365551212 // 10000' is 936555. 
prefix_num = tmp_val % 1000 # '% 1000' gets rightmost 3 digits, so '936555 % 1000' is 555.

'Dividing by a power of 10 removes rightmost digits.' Ex: 321 // 10 is 32. Ex: 321 // 100 is 3.

'% by a power of 10 gets rightmost digits.' Ex: 321 % 10 is 1. Ex: 321 % 100 is 21.


letter = 'A'

if (letter is a vowel) and (letter is uppercase):
    print "The letter is an upercase vowel."
else:
    print "The letter is not an uppercase vowel."